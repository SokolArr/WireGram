from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram import html, Bot
from datetime import datetime

from ...keyboards.admin import access_request_kb
from modules.db import DbManager, ReturnCode
from modules.db.models import UserAccCode
from settings import settings

dbm = DbManager()
bot = Bot(
    settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)


async def join_cmd(message: Message) -> None:
    user = await dbm.get_user(message.from_user.id)

    admins_id = list(set([settings.TG_ADMIN_ID] + (await dbm.get_admins())))
    if user:
        user_access = await dbm.get_access(
            user.user_tg_id, UserAccCode.BOT.value
        )
        if user_access:
            user_access_valid_to_str = user_access.valid_to_dttm.strftime(
                "%Y-%m-%d %H:%M:%S"
            )
            if datetime.now() > user_access.valid_to_dttm:
                acc_req_resp = await dbm.add_access_request(
                    user.user_tg_id, UserAccCode.BOT.value
                )
                if acc_req_resp == ReturnCode.SUCCESS:
                    for admin_id in admins_id:
                        await bot.send_message(
                            admin_id,
                            html.bold(
                                "üö® –í–ù–ò–ú–ê–ù–ò–ï!\n–°–û–û–ë–©–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–£\n"
                            )
                            + f"–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç "
                            f"{user_access_valid_to_str}) "
                            f"–∫ –±–æ—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.user_tag} ("
                            f"{user.user_tg_id})",
                            reply_markup=access_request_kb(user.user_tg_id),
                        )
                    await message.answer(
                        f"‚ö†Ô∏è –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É "
                        f"{html.bold(user_access_valid_to_str)}, "
                        "–∏ —è –Ω–∞–ø—Ä–∞–≤–∏–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø ‚è≥"
                    )
                elif acc_req_resp == ReturnCode.UNIQUE_VIOLATION:
                    await message.answer(
                        "üïí –¢—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª –¥–æ—Å—Ç—É–ø. –î–æ–∂–¥–∏—Å—å –µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è!"
                    )
            else:
                await message.answer(
                    f"‚úÖ –¢–≤–æ–π –¥–æ—Å—Ç—É–ø –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ "
                    f"{html.bold(user_access_valid_to_str)}"
                )
        else:
            acc_req_resp = await dbm.add_access_request(
                user.user_tg_id, UserAccCode.BOT.value
            )
            if acc_req_resp == ReturnCode.SUCCESS:
                for admin_id in admins_id:
                    await bot.send_message(
                        admin_id,
                        html.bold("üö® –í–ù–ò–ú–ê–ù–ò–ï! –°–û–û–ë–©–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–£\n")
                        + f"–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –æ—Ç "
                        f"–Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
                        f"@{user.user_tag} ({user.user_tg_id})",
                        reply_markup=access_request_kb(user.user_tg_id),
                    )
                await message.answer(
                    "üì® –ù–∞–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É. –û–∂–∏–¥–∞–π –æ–¥–æ–±—Ä–µ–Ω–∏—è! ‚è≥"
                )
            elif acc_req_resp == ReturnCode.UNIQUE_VIOLATION:
                await message.answer(
                    "üïí –¢—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª –¥–æ—Å—Ç—É–ø. –î–æ–∂–¥–∏—Å—å –µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è!"
                )
    else:
        await message.answer(
            "ü§î –Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é, –∂–º–∏ /start –∏ –±—É–¥–µ–º –∑–Ω–∞–∫–æ–º—ã! üëã"
        )

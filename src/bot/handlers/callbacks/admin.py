import logging
from aiogram.types import CallbackQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram import Bot
from datetime import datetime, timedelta

from ...keyboards.admin import (
    admin_menu_kb,
    all_access_request_btn,
    access_requests_kb,
    all_conf_pay_requests_btn,
    conf_pay_requests_btn,
)
from modules.db import DbManager, ReturnCode
from modules.xui import VlessClientApi
from settings import settings

dbm = DbManager()
bot = Bot(
    settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
logger = logging.getLogger(__name__)


async def admin_cb_cmd(call: CallbackQuery):
    """
    Handle callback queries for admin actions.

    Args:
        call (CallbackQuery): The callback query from the admin.
    """
    try:
        call_data = call.data.split(":")
        call_tag = call_data[0]
        user_tg_id = int(call_data[1])
        user_config_name = ""
        if len(call_data) > 2:
            user_config_name = call_data[2]

        match call_tag:
            case "admin_ar_acpt_btn":
                try:
                    resp = await dbm.add_access(user_tg_id, "BOT", 365)
                    if resp == ReturnCode.SUCCESS:
                        await call.message.edit_text(
                            f"‚úÖ –î–æ–±–∞–≤–∏–ª –¥–æ—Å—Ç—É–ø –¥–ª—è {user_tg_id}",
                            reply_markup=all_access_request_btn(user_tg_id),
                        )
                        await bot.send_message(
                            user_tg_id,
                            "üëã –ü—Ä–∏–≤–µ—Ç! –¢–µ–±–µ –æ–¥–æ–±—Ä–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–æ—Ç–∞ üéâ\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π /menu, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å",
                        )
                    elif resp == ReturnCode.UNIQUE_VIOLATION:
                        resp_2 = await dbm.update_access(
                            user_tg_id, "BOT", 365
                        )
                        if resp_2 == ReturnCode.SUCCESS:
                            await call.message.edit_text(
                                f"üîÑ –û–±–Ω–æ–≤–∏–ª –¥–æ—Å—Ç—É–ø –¥–ª—è {user_tg_id}",
                                reply_markup=all_access_request_btn(
                                    user_tg_id
                                ),
                            )
                            await bot.send_message(
                                user_tg_id,
                                "üëã –ü—Ä–∏–≤–µ—Ç! –¢–µ–±–µ –ø—Ä–æ–¥–ª–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–æ—Ç–∞ üéâ\n"
                                "–ò—Å–ø–æ–ª—å–∑—É–π /menu, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å",
                            )
                        else:
                            raise Exception
                    else:
                        raise Exception
                except Exception:
                    await call.message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_tg_id}",
                        reply_markup=all_access_request_btn(user_tg_id),
                    )

            case "admin_ar_decl_btn":
                pass

            case "admin_all_ar_btn":
                access_requests = await dbm.get_access_requests("BOT", limit=3)
                if access_requests:
                    await call.message.edit_text(
                        "üìã –í–æ—Ç –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –∑–∞—è–≤–∫–∏:",
                        reply_markup=access_requests_kb(
                            access_requests
                        ).as_markup(),
                    )
                else:
                    await call.message.edit_text(
                        "üì≠ –¢—É—Ç –ø—É—Å—Ç–æ...",
                        reply_markup=all_access_request_btn(user_tg_id),
                    )

            case "admin_conf_pay_acpt_btn":
                expired_delta_days = 30
                upd_resp = await VlessClientApi().update_client_expired_time(
                    user_config_name,
                    datetime.now() + timedelta(expired_delta_days),
                )
                if upd_resp:
                    resp = await dbm.close_payed_order(
                        user_tg_id,
                        user_config_name,
                        expired_delta_days=expired_delta_days,
                    )
                    if resp == ReturnCode.SUCCESS:
                        await call.message.edit_text(
                            f"‚úÖ –û–±–Ω–æ–≤–∏–ª —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è {user_tg_id} {user_config_name} "
                            "–∏ –ø—Ä–æ–¥–ª–∏–ª –¥–æ—Å—Ç—É–ø —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ 30 –¥–Ω–µ–π üìÖ",
                            reply_markup=admin_menu_kb(user_tg_id),
                        )
                        await bot.send_message(
                            user_tg_id,
                            f"üëã –ü—Ä–∏–≤–µ—Ç!\n–¢–µ–±–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞ {user_config_name}! üéâ\n"
                            "–û—Ç–∫—Ä–æ–π –º–µ–Ω—é: /menu –∏ –≤—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏",
                        )
                    else:
                        await call.message.edit_text(
                            f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_tg_id} {user_config_name}",
                            reply_markup=admin_menu_kb(user_tg_id),
                        )
                        logger.error(
                            f"BAD TRY TO ACEPT SERVICE ACCESS TO {user_tg_id}"
                        )
                else:
                    await call.message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_tg_id} {user_config_name} –Ω–∞ 3xui",
                        reply_markup=admin_menu_kb(user_tg_id),
                    )
                    logger.error(
                        f"BAD TRY TO ACEPT SERVICE ACCESS TO {user_tg_id} ON 3XUI"
                    )

            case "admin_conf_pay_decl_btn":
                resp = await dbm.update_order_status(
                    user_tg_id, user_config_name, "PAYED", "NEW"
                )
                if resp == ReturnCode.SUCCESS:
                    await call.message.edit_text(
                        f"‚ùå –û—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–∫–∞–∑ –¥–ª—è {user_tg_id} {user_config_name} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ NEW",
                        reply_markup=admin_menu_kb(user_tg_id),
                    )
                    await bot.send_message(
                        user_tg_id,
                        f"üëã –ü—Ä–∏–≤–µ—Ç!\n–¢–≤–æ—è –æ–ø–ª–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞ {user_config_name} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞! ‚ùå",
                    )
                else:
                    await call.message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è {user_tg_id} {user_config_name} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ NEW",
                        reply_markup=admin_menu_kb(user_tg_id),
                    )
                    logger.error(
                        f"BAD TRY TO DECLINE SERVICE ACCESS TO {user_tg_id}"
                    )

            case "admin_all_conf_pay_btn":
                payed_orders = await dbm.get_payed_orders(limit=3)
                if payed_orders:
                    await call.message.edit_text(
                        "üìã –í–æ—Ç –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –∑–∞—è–≤–∫–∏:",
                        reply_markup=conf_pay_requests_btn(payed_orders),
                    )
                else:
                    await call.message.edit_text(
                        "üì≠ –¢—É—Ç –ø—É—Å—Ç–æ...",
                        reply_markup=all_conf_pay_requests_btn(user_tg_id),
                    )

            case "admin_menu_back_btn":
                await call.message.edit_text(
                    "–í–æ—Ç –º–µ–Ω—é –¥–ª—è —Ç–µ–±—è", reply_markup=admin_menu_kb(user_tg_id)
                )

    except Exception as e:
        logger.error(f"{e}")
    finally:
        await call.answer()

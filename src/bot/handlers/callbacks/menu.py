from aiogram.types import CallbackQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram import html, Bot
from datetime import datetime

from ...keyboards.menu import menu_kb
from ...keyboards.account import account_kb
from ...keyboards.service import new_service_kb, services_kb
from modules.db import DbManager
from modules.db.models import UserAccCode, OrderStatus, get_order_nm_str
from settings import settings
from logger import MainLogger, get_error_timestamp

dbm = DbManager()
bot = Bot(
    settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
logger = MainLogger(__name__).get()


async def user_account(call: CallbackQuery, user_tg_id: int):
    try:
        db_user = await dbm.get_user(user_tg_id)
        profile_str = (
            f"\nüë§ {html.bold("–ü—Ä–æ—Ñ–∏–ª—å:")}"
            f"\n\t- –ò–º—è: {db_user.user_name}"
            f"\n\t- TG ID: {html.code(str(db_user.user_tg_id))}\n"
        )
        bot_access = await dbm.get_access(user_tg_id, UserAccCode.BOT.value)
        access_valid_to = bot_access.valid_to_dttm.strftime(
            "%Y-%m-%d %H:%M:%S"
        )
        bot_access_str = (
            f"\nüîë {html.bold("–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É:")}"
            "\n\t- –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω ‚úÖ"
            f"\n\t- –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {access_valid_to}\n"
        )
        user_orders = await dbm.get_oders_hist(user_tg_id)
        order_mess = ""
        if user_orders:
            order_mess += f"\nüì¶ {html.bold("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:")}"
            order_mess += html.italic(
                "\n(c—Ç–∞—Ç—É—Å—ã: üÜï —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω -> üíµ –æ–ø–ª–∞—á–µ–Ω -> ‚úÖ –∑–∞–≤–µ—Ä—à–µ–Ω)"
            )
            for idx, order in enumerate(user_orders):
                order_id = get_order_nm_str(order)
                order_upd_dt_str = order.sys_updated_dttm.strftime(
                    "%Y-%m-%d %H:%M:%S"
                )
                if order.order_status == OrderStatus.NEW.value:
                    status = "üÜï —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω"
                elif order.order_status == OrderStatus.PAYED.value:
                    status = "üíµ –æ–ø–ª–∞—á–µ–Ω"
                elif order.order_status == OrderStatus.CLOSED.value:
                    status = "‚úÖ –∑–∞–≤–µ—Ä—à–µ–Ω"
                order_mess += (
                    f"\n\t{idx + 1}. –ó–∞–∫–∞–∑ {html.code(order_id)} "
                    f"(—Å—Ç–∞—Ç—É—Å: {status}, –≤—Ä–µ–º—è: {order_upd_dt_str})"
                )

            order_mess += "\n"

        help_str = (
            f"\nüìû {html.bold("–ü–æ–¥–¥–µ—Ä–∂–∫–∞:")}"
            "\n\t- –ö–æ–º–∞–Ω–¥–∞: /help"
            f"\n\t- –ß–∞—Ç: {settings.TG_HELP_CHAT_LINK}\n"
        )

        user_configs = await dbm.get_service_configs(user_tg_id)
        conf_mess = ""
        if user_configs:
            conf_mess += f"\nüõ†Ô∏è {html.bold("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")}"
            for idx, conf in enumerate(user_configs):
                conf_mess += f"\n\t{idx + 1}. {html.code(conf.config_name)}"
            conf_mess += "\n"

        mess = (
            html.bold("üìÇ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n")
            + profile_str
            + bot_access_str
            + conf_mess
            + order_mess
            + help_str
            + f"\n{html.italic(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))}"
        )
        await call.message.edit_text(
            mess,
            reply_markup=account_kb(user_tg_id),
            disable_web_page_preview=True,
        )
    except Exception as e:
        logger.error(e)
        mess = f"‚ùå –ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É {user_tg_id}"
        await call.message.edit_text(
            mess + f"{get_error_timestamp(logger)}",
            reply_markup=menu_kb(user_tg_id),
        )


async def user_services(call: CallbackQuery, user_tg_id: int):
    try:
        pre_mess = (
            f"{html.bold("üåé –°–µ—Ä–≤–∏—Å—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n‚ÑπÔ∏è –û —Ä–∞–∑–¥–µ–ª–µ")}\n"
            + (
                "- –≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –Ω–∏—Ö. "
                "H–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã"
                " –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 'VLESS' \n"
            )
        )
        user_configs = await dbm.get_service_configs(user_tg_id)
        if user_configs:
            conf_mess = "\n"
            for idx, conf in enumerate(user_configs):
                conf_valid_to_dttm = conf.valid_to_dttm

                if datetime.now() > conf_valid_to_dttm:
                    active_place_holder = "‚õîÔ∏è –¥–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è"
                else:
                    active_place_holder = "‚úÖ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ"

                conf_valid_to_dttm_str = conf_valid_to_dttm.strftime(
                    "%Y-%m-%d %H:%M:%S"
                )
                conf_mess += (
                    f"\t{idx + 1}. {html.code(conf.config_name)} "
                    f"({active_place_holder} {conf_valid_to_dttm_str})\n"
                )
            pre_mess_2 = (
                "- –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è "
                "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\n"
            )
            used_configs = f"{len(user_configs)}/{settings.MAX_CONF_PER_USER}"
            mess = (
                pre_mess
                + pre_mess_2
                + html.bold(f"\nüõ†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ({used_configs})")
                + conf_mess
            )
            await call.message.edit_text(
                mess,
                reply_markup=services_kb(user_tg_id, user_configs),
            )
        else:
            used_configs = f"0/{settings.MAX_CONF_PER_USER}"
            mess = (
                html.bold(f"\nüõ†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ({used_configs})")
                + "\n- ‚ö†Ô∏è –ù–µ –Ω–∞—à–µ–ª —Ç–≤–æ–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. "
                "–ù–æ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π üôÇ"
            )
            await call.message.edit_text(
                pre_mess + mess,
                reply_markup=new_service_kb(user_tg_id),
            )
    except Exception as e:
        logger.error(e)
        mess = f"‚ùå –ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º {user_tg_id}"
        await call.message.edit_text(
            mess + f"{get_error_timestamp(logger)}",
            reply_markup=menu_kb(user_tg_id),
        )


async def menu_cb_cmd(call: CallbackQuery):
    try:
        call_tag = call.data.split(":")[0]
        user_tg_id = int(call.data.split(":")[1])

        match call_tag:
            case "menu_ua_btn":
                await user_account(call, user_tg_id)

            case "menu_service_btn":
                await user_services(call, user_tg_id)

            case "menu_pref_btn":
                pass

            case "menu_back_btn":
                await call.message.edit_text(
                    html.bold("üìã –ú–µ–Ω—é")
                    + "\n\n"
                    + html.bold("üìÇ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
                    + "\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π "
                    "–ø—Ä–æ—Ñ–∏–ª—å, —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, "
                    "–∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n\n"
                    + html.bold("üåé –°–µ—Ä–≤–∏—Å—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    + "\n–£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ "
                    "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. "
                    "–°–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.",
                    reply_markup=menu_kb(user_tg_id),
                )

    except Exception as e:
        logger.error(f"{e}")
    finally:
        await call.answer()
